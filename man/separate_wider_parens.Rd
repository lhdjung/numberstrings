% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/separate-wider-parens.R
\name{separate_wider_parens}
\alias{separate_wider_parens}
\title{Split a string into columns by parentheses or similar}
\usage{
separate_wider_parens(
  data,
  cols,
  delim = "parens",
  ...,
  end1 = "x",
  end2 = "sd",
  names_sep = NULL,
  names_repair = "check_unique",
  name_after = "after",
  too_few = c("error", "debug", "align_start"),
  check_delim = TRUE,
  cols_remove = TRUE,
  trim = TRUE,
  transform = FALSE
)
}
\arguments{
\item{data}{A data frame.}

\item{cols}{<\code{\link[tidyr:tidyr_tidy_select]{tidy-select}}> Columns to separate.}

\item{delim}{What to split by. Either \code{"parens"}, \code{"brackets"}, or
\code{"braces"}; or a length-2 vector of custom delimiters (see Examples).
Default is \code{"parens"}.}

\item{...}{These dots are for future extensions and must be empty.}

\item{end1, end2}{Name endings of the new columns before and inside the
parenthesis-like characters. Defaults are \code{"x"} and \code{"sd"}, for strings
with the pattern \code{"x (sd)"}.}

\item{names_sep}{Optionally, choose a delimiter between the original column
names and \code{end1} / \code{end2}. Default is \code{NULL}.}

\item{names_repair}{Used to check that output data frame has valid
names. Must be one of the following options:
\itemize{
\item \verb{"minimal}": no name repair or checks, beyond basic existence,
\item \verb{"unique}": make sure names are unique and not empty,
\item \verb{"check_unique}": (the default), no name repair, but check they are unique,
\item \verb{"universal}": make the names unique and syntactic
\item a function: apply custom name repair.
\item \link[tidyr]{tidyr_legacy}: use the name repair from tidyr 0.8.
\item a formula: a purrr-style anonymous function (see \code{\link[rlang:as_function]{rlang::as_function()}})
}

See \code{\link[vctrs:vec_as_names]{vctrs::vec_as_names()}} for more details on these terms and the
strategies used to enforce them.}

\item{name_after}{Name of the column that captures the
part of the string after the closing \code{delim} element, if there is such a
part. Change it to avoid name conflicts, in particular. Default is
\code{"after"}.}

\item{too_few}{What should happen if a value separates into too few
pieces?
\itemize{
\item \code{"error"}, the default, will throw an error.
\item \code{"debug"} adds additional columns to the output to help you
locate and resolve the underlying problem. This option is intended to
help you debug the issue and address and should not generally remain in
your final code.
\item \code{"align_start"} aligns starts of short matches, adding \code{NA} on the end
to pad to the correct length.
\item \code{"align_end"} (\code{separate_wider_delim()} only) aligns the ends of short
matches, adding \code{NA} at the start to pad to the correct length.
}}

\item{cols_remove}{Should the input \code{cols} be removed from the output?
Always \code{FALSE} if \code{too_few} or \code{too_many} are set to \code{"debug"}.}

\item{trim}{Should whitespace around the delimiters be
removed? Default is \code{TRUE}.}
}
\description{
Split a string into columns by parentheses or similar
}
\seealso{
\code{\link[tidyr:separate_wider_delim]{tidyr::separate_wider_regex()}}, the workhorse behind this function.
Indeed, \code{separate_wider_parens()} was designed for consistency with tidyr's
\verb{separate_wider_*()} functions because their use cases are very similar.
}
